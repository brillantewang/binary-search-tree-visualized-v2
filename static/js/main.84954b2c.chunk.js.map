{"version":3,"sources":["StyledTree/util.js","StyledTree/index.js","App.js","serviceWorker.js","index.js"],"names":["insertBlankNodesRecursively","node","children","forEach","child","length","childNode","blankNode","name","nodeSvgShape","shape","shapeProps","r","parseInt","push","unshift","insertBlankChildNode","hidePathsToBlankNodes","blankCircles","document","querySelectorAll","map","circle","parentNode","id","querySelector","getPathsToBlankNodes","path","style","strokeWidth","getTreeDimensions","getBoundingClientRect","TreeContainer","styled","div","props","height","width","nodeStyle","stroke","fill","styles","links","nodes","leafNode","textLayout","textAnchor","x","y","StyledTree","rawTreeData","treeContainerEl","useRef","useState","translate","setTranslate","treeData","setTreeData","treeContainerDimensions","setTreeContainerDimensions","positionTree","rootNodeDimensions","treeDimensions","rootNodeOffsetLeft","left","treeContainerPadding","vertical","horizontal","adjustContainerSizeAndTreePosition","setTimeout","resizeTreeContainer","useEffect","newTreeData","cloneDeep","insertBlankPlaceholderNodes","ref","data","orientation","pathFunc","zoomable","onUpdate","event","defaultProps","Root","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84954b2c.chunk.js","sourcesContent":["const buildBlankNode = () => ({\n  name: '',\n  nodeSvgShape: {\n    shape: 'circle',\n    shapeProps: {\n      r: 0,\n    }\n  }\n})\n\nconst insertBlankChildNode = (node) => {\n  const childNode = node.children[0];\n  const blankNode = buildBlankNode();\n  if (parseInt(childNode.name) < parseInt(node.name)) {\n    node.children.push(blankNode);\n  } else {\n    node.children.unshift(blankNode);\n  }\n}\n\nexport const insertBlankNodesRecursively = node => {\n  const children = node.children || [];\n  children.forEach(child => insertBlankNodesRecursively(child));\n  if (children.length === 1) insertBlankChildNode(node);\n}\n\nconst getPathsToBlankNodes = () => {\n  const blankCircles = document.querySelectorAll('circle[r=\"0\"]');\n  const blankNodeIds = [...blankCircles].map(circle => circle.parentNode.id);\n  return blankNodeIds.map(id => document.querySelector(`path[data-target-id=\"${id}\"`))\n};\n\nexport const hidePathsToBlankNodes = () => {\n  const pathsToBlankNodes = getPathsToBlankNodes();\n  pathsToBlankNodes.forEach(path => path.style.strokeWidth = \"0\");\n};\n\nexport const getRootNodeDimensions = () => {\n  const treeGElement = document.querySelector('.nodeBase');\n  return treeGElement.getBoundingClientRect();\n}\n\nexport const getTreeDimensions = () => {\n  const treeGElement = document.querySelector('g');\n  return treeGElement.getBoundingClientRect();\n}\n\nexport const getTreeContainerPadding = () => {\n  return ({ vertical: 400, horizontal: 40 });\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport Tree from 'react-d3-tree';\nimport styled from 'styled-components/macro';\nimport cloneDeep from 'clone-deep';\nimport {\n  insertBlankNodesRecursively,\n  hidePathsToBlankNodes,\n  getTreeDimensions,\n  getRootNodeDimensions,\n  getTreeContainerPadding,\n} from './util';\nimport PropTypes from 'prop-types';\n\nconst NODE_RADIUS = 40;\n\nconst TreeContainer = styled.div`\n  height: ${props => `${props.height}px`};\n  width: ${props => `${props.width}px`};\n  min-height: 100vh;\n`;\n\nconst treeDefaultData = {\n  name: '12',\n  children: [\n    {\n      name: '8',\n      children: [\n        {\n          name: '15',\n          children: [\n            {\n              name: '3',\n            },\n          ]\n        },\n        {\n          name: '19',\n          children: [\n            {\n              name: '11',\n            },\n            {\n              name: '55',\n              children: [\n                {\n                  name: '14',\n                  children: [\n                    {\n                      name: '444',\n                    }\n                  ]\n                }\n              ]\n            },\n          ]\n        },\n      ]\n    },\n    {\n      name: '24',\n      children: [\n        {\n          name: '2',\n        }\n      ]\n    }\n  ]\n};\n\nconst nodeStyle = {\n  circle: {\n    stroke: 'white',\n    fill: '#162447',\n  },\n  name: {\n    stroke: 'white',\n    fill: 'white',\n  },\n}\n\nconst styles = {\n  links: {\n    stroke: 'white',\n  },\n  nodes: {\n    node: nodeStyle,\n    leafNode: nodeStyle,\n  }\n};\n\nconst nodeSvgShape = {\n  shape: 'circle',\n  shapeProps: {\n    r: 40,\n  },\n};\n\nconst textLayout = {\n  textAnchor: 'middle',\n  x: 0,\n  y: 0\n};\n\nconst StyledTree = ({ rawTreeData }) => {\n  const treeContainerEl = useRef(null);\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\n  const [treeData, setTreeData] = useState({});\n  const [treeContainerDimensions, setTreeContainerDimensions] = useState({ height: 0, width: 0 });\n  \n  // useEffect(() => {\n  //   onmousemove = function(e){console.log(\"mouse location:\", e.clientX, e.clientY)};\n  // }, [])\n\n  const resizeTreeContainer = () => {\n    const treeDimensions = getTreeDimensions();\n    const treeContainerPadding = getTreeContainerPadding(treeDimensions);\n\n    setTreeContainerDimensions({\n      height: treeDimensions.height + treeContainerPadding.vertical,\n      width: treeDimensions.width + treeContainerPadding.horizontal,\n    });\n  };\n\n  const positionTree = () => {\n    const rootNodeDimensions = getRootNodeDimensions();\n    const treeDimensions = getTreeDimensions();\n    const rootNodeOffsetLeft = rootNodeDimensions.left - treeDimensions.left;\n    const xPosition = rootNodeOffsetLeft + NODE_RADIUS;\n    const treeContainerPadding = getTreeContainerPadding(treeDimensions);\n\n    setTranslate({\n      x: xPosition + (treeContainerPadding.horizontal / 2),\n      y: treeContainerPadding.vertical / 2,\n    });\n  };\n\n  const adjustContainerSizeAndTreePosition = () => {\n    // We wait one second to give enough time for the tree g element to newly render first\n    setTimeout(() => {\n      resizeTreeContainer();\n      positionTree();\n    }, 1000);\n  }\n\n  useEffect(() => {\n    const insertBlankPlaceholderNodes = () => {\n      // We insert blank nodes in the tree to act as sibling placeholders.\n      // That allows single child nodes to be offset from their parents instead of\n      // positioned directly below (the default behavior for react-d3-tree).\n      const newTreeData = cloneDeep(rawTreeData);\n      insertBlankNodesRecursively(newTreeData);\n      setTreeData(newTreeData);\n    };\n\n    insertBlankPlaceholderNodes();\n  }, [rawTreeData])\n\n  useEffect(() => {\n    // After we insert blank placeholder nodes, we also need to hide their paths.\n    hidePathsToBlankNodes();\n    adjustContainerSizeAndTreePosition();\n  }, [treeData]);\n\n  const onUpdate = event => {\n    // Toggling (aka expanding/collapsing) a node will cause react-d3-tree to fully re-create\n    // the new tree, including the paths to blank nodes again. So we need to hide them.\n    hidePathsToBlankNodes();\n    if (event.node) adjustContainerSizeAndTreePosition();\n  }\n\n  return (\n    <TreeContainer ref={treeContainerEl} height={treeContainerDimensions.height} width={treeContainerDimensions.width}>\n      <Tree\n        data={treeData}\n        orientation='vertical'\n        pathFunc='straight'\n        translate={translate}\n        styles={styles}\n        nodeSvgShape={nodeSvgShape}\n        textLayout={textLayout}\n        zoomable={false}\n        onUpdate={onUpdate}\n      />\n    </TreeContainer>\n  )\n};\n\nStyledTree.propTypes = {\n  rawTreeData: PropTypes.object,\n};\n\nStyledTree.defaultProps = {\n  rawTreeData: treeDefaultData,\n};\n\nexport default StyledTree;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport StyledTree from './StyledTree';\n\nconst Root = styled.div`\n  background: #162447;\n  min-height: 100vh;\n  min-width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: fit-content;\n`;\n\nconst App = () => (\n  <Root>\n    <StyledTree />\n  </Root>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
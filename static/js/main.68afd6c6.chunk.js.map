{"version":3,"sources":["StyledTree.js","ResponsiveTree/util.js","ResponsiveTree/Mobile.js","ResponsiveTree/Desktop.js","breakpoints.js","store/context.js","ResponsiveTree/EmptyState.js","ResponsiveTree/index.js","store/useGlobalState.js","store/GlobalStateProvider.js","MobileFriendlyInput.js","ControlPanel/Insert.js","ControlPanel/index.js","App.js","serviceWorker.js","index.js"],"names":["nodeStyle","circle","stroke","fill","name","styles","links","nodes","node","leafNode","nodeSvgShape","shape","shapeProps","r","textLayout","textAnchor","x","y","pathFunc","linkData","source","target","StyledTree","data","translate","zoomable","onUpdate","orientation","defaultProps","insertBlankNodesRecursively","children","forEach","child","length","childNode","blankNode","parseFloat","push","unshift","insertBlankChildNode","getTreeDimensions","document","querySelector","getBoundingClientRect","isTreeEmpty","TreeContainer","styled","div","props","height","width","treeContainerPadding","Mobile","treeData","useState","setTranslate","treeContainerDimensions","setTreeContainerDimensions","useEffect","adjustContainerSizeAndTreePosition","callback","wait","timeout","clearTimeout","setTimeout","debounce","resizeTreeContainer","positionTree","resizeObserver","ResizeObserver","treeGElement","observe","treeDimensions","rootNodeDimensions","rootNodeOffsetLeft","left","rootNodeRadius","Desktop","treeContainerEl","useRef","dimensions","current","centerTree","ref","breakpoints","Context","createContext","Root","Welcome","Instructions","EmptyState","ResponsiveTree","rawTreeData","useContext","globalState","setTreeData","newTreeData","cloneDeep","insertBlankPlaceholderNodes","window","innerWidth","reducer","state","action","type","payload","value","initialState","useGlobalState","useReducer","globalDispatch","GlobalStateProvider","Provider","Input","input","MobileFriendlyInput","onChange","min","inputmode","pattern","InputContainer","Submit","button","sc","isSubmitDisabled","css","Error","Insert","setValue","error","setError","e","slice","onClick","findNode","valueToFind","currentNodeValue","leftNode","find","rightNode","undefined","rawTreeDataDeepCloned","insertNode","nodeToInsert","valueToAdd","Object","assign","console","log","toString","replaceTree","disabled","ControlPanel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68afd6c6.chunk.js","sourcesContent":["import React from 'react';\nimport Tree from 'react-d3-tree';\nimport PropTypes from 'prop-types';\n\nconst nodeStyle = {\n  circle: {\n    stroke: 'white',\n    fill: '#162447',\n  },\n  name: {\n    stroke: 'white',\n    fill: 'white',\n  },\n};\n\nconst styles = {\n  links: {\n    stroke: 'white',\n  },\n  nodes: {\n    node: nodeStyle,\n    leafNode: nodeStyle,\n  }\n};\n\nconst nodeSvgShape = {\n  shape: 'circle',\n  shapeProps: {\n    r: 40,\n  },\n};\n\nconst textLayout = {\n  textAnchor: 'middle',\n  x: 0,\n  y: 0\n};\n\nconst pathFunc = linkData => {\n  const { source, target } = linkData;\n\n  // For the path elements leading to blank nodes, we don't want them to have\n  // a real path/shape. Otherwise we'll see a bunch of paths leading to\n  // nothing and potentially making the tree g element unnecessarily wide if some of\n  // these paths are at the edges.\n  if (target.name === '') return null;\n\n  return `M${source.x},${source.y}L${target.x},${target.y}`;\n};\n\nconst StyledTree = ({ data, translate, zoomable, onUpdate }) => {\n  return (\n    <Tree\n      orientation='vertical'\n      pathFunc={pathFunc}\n      styles={styles}\n      nodeSvgShape={nodeSvgShape}\n      textLayout={textLayout}\n      data={data}\n      translate={translate}\n      zoomable={zoomable}\n      onUpdate={onUpdate}\n    />\n  )\n};\n\nStyledTree.propTypes = {\n  data: PropTypes.object,\n  translate: PropTypes.object,\n  zoomable: PropTypes.bool,\n  onUpdate: PropTypes.func,\n};\n\nStyledTree.defaultProps = {\n  zoomable: true,\n};\n\nexport default StyledTree;\n","const buildBlankNode = () => ({\n  name: '',\n  nodeSvgShape: {\n    shape: 'circle',\n    shapeProps: {\n      r: 0,\n    }\n  }\n});\n\nconst insertBlankChildNode = (node) => {\n  const childNode = node.children[0];\n  const blankNode = buildBlankNode();\n  if (parseFloat(childNode.name) < parseFloat(node.name)) {\n    node.children.push(blankNode);\n  } else {\n    node.children.unshift(blankNode);\n  }\n};\n\nexport const findNode = (node, valueToFind) => {\n  const currentNodeValue = parseFloat(node.name);\n  const leftNode = node.children.find(child => parseFloat(child.name) < currentNodeValue);\n  const rightNode = node.children.find(child => parseFloat(child.name) > currentNodeValue);\n\n  if (isTreeEmpty(node)) {\n    return;\n  } else if (valueToFind < currentNodeValue) {\n    if (leftNode === undefined) {\n      return\n    } else {\n      return findNode(leftNode, valueToFind);\n    }\n  } else if (valueToFind > currentNodeValue) {\n    if (rightNode === undefined) {\n      return;\n    } else {\n      return findNode(rightNode, valueToFind);\n    }\n  } else {\n    return currentNodeValue;\n  }\n};\n\nexport const insertNode = (node, nodeToInsert) => {\n  const currentNodeValue = parseFloat(node.name);\n  const valueToAdd = parseFloat(nodeToInsert.name);\n  const leftNode = node.children.find(child => parseFloat(child.name) < currentNodeValue);\n  const rightNode = node.children.find(child => parseFloat(child.name) > currentNodeValue);\n\n  if (isTreeEmpty(node)) {\n    Object.assign(node, nodeToInsert);\n  } else if (valueToAdd < currentNodeValue) {\n    if (leftNode === undefined) {\n      node.children.unshift(nodeToInsert);\n    } else {\n      insertNode(leftNode, nodeToInsert);\n    }\n  } else if (valueToAdd > currentNodeValue) {\n    if (rightNode === undefined) {\n      node.children.push(nodeToInsert);\n    } else {\n      insertNode(rightNode, nodeToInsert);\n    }\n  } else {\n    console.log('Duplicate values not allowed');\n  }\n};\n\n\nexport const insertBlankNodesRecursively = node => {\n  const children = node.children || [];\n  children.forEach(child => insertBlankNodesRecursively(child));\n  if (children.length === 1) insertBlankChildNode(node);\n};\n\nexport const getRootNodeDimensions = () => {\n  // Looks like react-d3-tree only gives the .nodeBase class name to nodes that have children.\n  // It gives nodes with no children the class name .leafNodeBase. So in the case that\n  // there's only one node in the entire tree, it has the class name .leafNodeBase, so we need\n  // to select with that class name instead, and treat it as the node base.\n  const nodeBase = document.querySelector('.nodeBase') || document.querySelector('.leafNodeBase');\n  return nodeBase.getBoundingClientRect();\n};\n\nexport const getTreeDimensions = () => {\n  const treeGElement = document.querySelector('g');\n  return treeGElement.getBoundingClientRect();\n};\n\n// adapted/simplified from https://www.educative.io/edpresso/how-to-use-the-debounce-function-in-javascript\nexport const debounce = (callback, wait) => {\n  let timeout;\n\n  return () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => callback(), wait);\n  }\n};\n\nexport const isTreeEmpty = node => node.name === null;\n","import React, { useState, useEffect } from 'react';\nimport StyledTree from '../StyledTree';\nimport styled from 'styled-components/macro';\nimport {\n  getTreeDimensions,\n  getRootNodeDimensions,\n  debounce,\n} from './util';\nimport PropTypes from 'prop-types';\n\nconst TreeContainer = styled.div`\n  height: ${props => `${props.height}px`};\n  width: ${props => `${props.width}px`};\n  min-height: 100vh;\n\n  svg {\n    /* Allows the tree to 'extend' past the bounds of the svg\n      while waiting for the tree container to resize */\n    overflow: visible;\n  }\n\n  circle[r=\"0\"] + g {\n    /* For some reason in Safari, the sibling g element of the blank circle\n    is given a 2x2 height and width.\n\n    So whenever the tree g element width gets calculated, it seems to take into account\n    this g element because it's taking up some space. However we don't want the width\n    to take into acccount any blank nodes because then the width might be unnecessarily wide\n    if a blank node is at the edge, making it look like there's extra horizontal padding.\n    So we give this g element display: none in order to essentially remove it from the\n    document so it no longer takes up space.\n\n    This seems to allow the tree g element width calculation to no longer take it into\n    account, giving us a width that's not overly wide in these 'blank node at the edges'\n    scenarios. */\n    display: none;\n  }\n`;\n\nconst treeContainerPadding = {\n  top: 200,\n  right: 20,\n  bottom: 200,\n  left: 20,\n};\n\nconst Mobile = ({ treeData }) => {\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\n  const [treeContainerDimensions, setTreeContainerDimensions] = useState({ height: 0, width: 0 });\n\n  useEffect(() => {\n    const adjustContainerSizeAndTreePosition = debounce(() => {\n      resizeTreeContainer();\n      positionTree();\n    }, 500);\n\n    const resizeObserver = new ResizeObserver(adjustContainerSizeAndTreePosition);\n    const treeGElement = document.querySelector('g');\n\n    resizeObserver.observe(treeGElement);\n  }, []);\n\n  const resizeTreeContainer = () => {\n    // We resize the tree container based on the newly updated size of the tree\n    const treeDimensions = getTreeDimensions();\n\n    setTreeContainerDimensions({\n      height: treeContainerPadding.top + treeDimensions.height + treeContainerPadding.bottom,\n      width: treeContainerPadding.left + treeDimensions.width + treeContainerPadding.right,\n    });\n  };\n\n  const positionTree = () => {\n    // We position the tree to be flush with the tree container\n    const rootNodeDimensions = getRootNodeDimensions();\n    const treeDimensions = getTreeDimensions();\n    const rootNodeOffsetLeft = rootNodeDimensions.left - treeDimensions.left;\n    const rootNodeRadius = rootNodeDimensions.width / 2;\n    const rootNodeXPositionInTree = rootNodeOffsetLeft + rootNodeRadius;\n\n    setTranslate({\n      x: rootNodeXPositionInTree + treeContainerPadding.left,\n      y: treeContainerPadding.top,\n    });\n  };\n\n  return (\n    <TreeContainer height={treeContainerDimensions.height} width={treeContainerDimensions.width}>\n      <StyledTree\n        data={treeData}\n        translate={translate}\n        zoomable={false}\n      />\n    </TreeContainer>\n  )\n};\n\nMobile.propTypes = {\n  treeData: PropTypes.object,\n};\n\nexport default Mobile;\n","import React, { useState, useRef, useEffect } from 'react';\nimport StyledTree from '../StyledTree';\nimport styled from 'styled-components/macro';\nimport PropTypes from 'prop-types';\n\nconst TreeContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n`;\n\nconst Desktop = ({ treeData }) => {\n  const treeContainerEl = useRef(null);\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\n  \n  const centerTree = () => {\n    const dimensions = treeContainerEl.current.getBoundingClientRect();\n    setTranslate({\n      x: dimensions.width / 2,\n      y: dimensions.height / 2\n    });\n  }\n\n  useEffect(() => {\n    centerTree();\n  }, []);\n\n  return (\n    <TreeContainer ref={treeContainerEl}>\n      <StyledTree\n        data={treeData}\n        translate={translate}\n      />\n    </TreeContainer>\n  )\n};\n\nDesktop.propTypes = {\n  treeData: PropTypes.object,\n};\n\nexport default Desktop;\n","// https://jsramblings.com/how-to-use-media-queries-with-styled-components/\n\nexport const breakpoints = {\n  tablet: 768,\n};\n","// sweet tutorial on adding global state w/o redux https://youtu.be/zq834kwVBCs\n\nimport { createContext } from 'react';\n\nconst Context = createContext({});\n\nexport default Context;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  padding: 0 20px;\n`;\n\nconst Welcome = styled.div`\n  text-align: center;\n  font-size: 20px;\n`;\n\nconst Instructions = styled.div`\n  margin-top: 12px;\n  font-size: 14px;\n`;\n\nconst EmptyState = () => {\n  return (\n    <Root>\n      <Welcome>whats gud boii welcome to Binary Search Tree Visualized</Welcome>\n      <Instructions>start by inserting a root value</Instructions>\n    </Root>\n  );\n};\n\nexport default EmptyState;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Mobile from './Mobile';\nimport Desktop from './Desktop';\nimport { breakpoints } from '../breakpoints';\nimport cloneDeep from 'clone-deep';\nimport { insertBlankNodesRecursively, isTreeEmpty } from './util';\nimport Context from '../store/context';\nimport EmptyState from './EmptyState';\n\nconst ResponsiveTree = () => {\n  const { globalState: { rawTreeData }} = useContext(Context);\n  const [treeData, setTreeData] = useState({});\n\n  useEffect(() => {\n    if (!isTreeEmpty(rawTreeData)) {\n      const insertBlankPlaceholderNodes = () => {\n        // We insert blank nodes in the tree to act as sibling placeholders.\n        // That allows single child nodes to be offset from their parents instead of\n        // positioned directly below (the default behavior for react-d3-tree).\n        const newTreeData = cloneDeep(rawTreeData);\n        insertBlankNodesRecursively(newTreeData);\n        setTreeData(newTreeData);\n      }\n\n      insertBlankPlaceholderNodes();\n    }\n  }, [rawTreeData]);\n\n  if (isTreeEmpty(rawTreeData)) return <EmptyState />;\n\n  // https://blog.logrocket.com/developing-responsive-layouts-with-react-hooks/\n  return window.innerWidth < breakpoints.tablet ? <Mobile treeData={treeData} /> : <Desktop treeData={treeData} />;\n}\n\nexport default ResponsiveTree;\n","import { useReducer } from 'react';\n\nexport const REPLACE_TREE = 'REPLACE_TREE';\n\nexport const replaceTree = value => ({\n  type: REPLACE_TREE,\n  payload: { value }\n})\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case REPLACE_TREE: {\n      return { rawTreeData: action.payload.value };\n    }\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  rawTreeData: {\n    name: null,\n    children: [],\n  },\n};\n\n// comment in to populate default test nodes\n// const initialState = {\n//   rawTreeData: {\n//     name: '12',\n//     children: [\n//       {\n//         name: '8',\n//         children: [\n//           {\n//             name: '15',\n//             children: [\n//               {\n//                 name: '3',\n//                 children: [],\n//               },\n//             ]\n//           },\n//           {\n//             name: '19',\n//             children: [\n//               {\n//                 name: '11',\n//                 children: [],\n//               },\n//               {\n//                 name: '55',\n//                 children: [\n//                   {\n//                     name: '14',\n//                     children: [\n//                       {\n//                         name: '444',\n//                         children: [],\n//                       }\n//                     ]\n//                   }\n//                 ]\n//               },\n//             ]\n//           },\n//         ]\n//       },\n//       {\n//         name: '24',\n//         children: [\n//           {\n//             name: '2',\n//             children: [],\n//           }\n//         ]\n//       }\n//     ],\n//   },\n// };\n\nconst useGlobalState = () => {\n  const [globalState, globalDispatch] = useReducer(reducer, initialState);\n\n  return { globalState, globalDispatch };\n};\n\nexport default useGlobalState;\n","import React from 'react';\nimport useGlobalState from './useGlobalState';\nimport Context from './context';\n\nconst GlobalStateProvider = ({ children }) =>\n  <Context.Provider value={useGlobalState()}>{children}</Context.Provider>;\n\nexport default GlobalStateProvider;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst Input = styled.input`\n  outline: none;\n  font-size: 18px;\n  width: 100px;\n`;\n\nconst MobileFriendlyInput = ({ onChange, value }) => (\n  <Input\n    // iPhone Safari was still allowing me to type non-numeric characters, so I added some\n    // of these attributes. source: https://stackoverflow.com/a/47455885/14781986\n    type=\"number\"\n    min=\"0\"\n    inputmode=\"numeric\"\n    pattern=\"[0-9]*\"\n    value={value}\n    onChange={onChange}\n  />\n);\n\nexport default MobileFriendlyInput;\n","import cloneDeep from 'clone-deep';\nimport React, { useContext, useState } from 'react';\nimport styled, { css } from 'styled-components/macro';\nimport MobileFriendlyInput from '../MobileFriendlyInput';\nimport { findNode, insertNode } from '../ResponsiveTree/util';\nimport Context from '../store/context';\nimport { insert, replaceTree } from '../store/useGlobalState';\n\nconst Root = styled.div`\n  color: white;\n  font-size: 18px;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n`;\n\nconst Submit = styled.button`\n  margin-left: 8px;\n  border: 1px solid white;\n  padding: 5px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n\n  ${({ sc }) => sc.isSubmitDisabled && css`\n    border: 1px solid grey;\n    color: grey;\n    cursor: default;\n  `}\n`;\n\nconst Error = styled.div`\n  font-size: 14px;\n  margin-top: 4px;\n`;\n\nconst Insert = () => {\n  const [value, setValue] = useState('');\n  const [error, setError] = useState('');\n  const { globalState: { rawTreeData }, globalDispatch } = useContext(Context);\n\n  const onValueChange = e => {\n    setValue(e.target.value.slice(0, 8));\n    if (e.target.value.length > 7) {\n      setError('chill.. too many characters (7 max)');\n    } else {\n      setError('');\n    }\n  };\n\n  const onSubmit = () => {\n    if (findNode(rawTreeData, value)) {\n      setError(`${value} is already in the tree. insert a different value mang`);\n    } else {\n      const rawTreeDataDeepCloned = cloneDeep(rawTreeData);\n      const nodeToInsert = { name: value.toString(), children: [] };\n      insertNode(rawTreeDataDeepCloned, nodeToInsert);\n      globalDispatch(replaceTree(rawTreeDataDeepCloned));\n      setError('');\n    }\n\n    setValue('');\n  }\n\n  const isSubmitDisabled = !value || error;\n\n  return (\n    <Root>\n      <InputContainer>\n        <MobileFriendlyInput value={value} onChange={onValueChange} />\n        <Submit\n          sc={{ isSubmitDisabled }}\n          onClick={onSubmit}\n          disabled={isSubmitDisabled}\n        >\n          Insert\n        </Submit>\n      </InputContainer>\n      <Error>{error}</Error>\n    </Root>\n  );\n};\n\nexport default Insert;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Insert from './Insert';\n\nconst Root = styled.div`\n  color: white;\n  position: fixed;\n  left: 10px;\n  top: 12px;\n`;\n\nconst ControlPanel = () => {\n  return (\n    <Root>\n      <Insert />\n    </Root>\n  );\n};\n\nexport default ControlPanel;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport ResponsiveTree from './ResponsiveTree';\nimport { breakpoints } from './breakpoints';\nimport GlobalStateProvider from './store/GlobalStateProvider';\nimport ControlPanel from './ControlPanel';\n\nconst Root = styled.div`\n  background: #162447;\n\n  @media (max-width: ${breakpoints.tablet}px) {\n    min-width: 100vw;\n    display: flex;\n    justify-content: center;\n    width: fit-content;\n  }\n`;\n\nconst App = () => (\n  <GlobalStateProvider>\n    <Root>\n      <ControlPanel />\n      <ResponsiveTree />\n    </Root>\n  </GlobalStateProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
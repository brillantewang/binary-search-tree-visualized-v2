{"version":3,"sources":["StyledTree.js","ResponsiveTree/util.js","ResponsiveTree/Mobile.js","ResponsiveTree/Desktop.js","breakpoints.js","ResponsiveTree/index.js","App.js","serviceWorker.js","index.js"],"names":["nodeStyle","circle","stroke","fill","name","styles","links","nodes","node","leafNode","nodeSvgShape","shape","shapeProps","r","textLayout","textAnchor","x","y","pathFunc","linkData","console","log","source","target","StyledTree","data","translate","zoomable","onUpdate","orientation","defaultProps","insertBlankNodesRecursively","children","forEach","child","length","childNode","blankNode","parseInt","push","unshift","insertBlankChildNode","getTreeDimensions","document","querySelector","getBoundingClientRect","TreeContainer","styled","div","props","height","width","treeContainerPadding","Mobile","treeData","useState","setTranslate","treeContainerDimensions","setTreeContainerDimensions","positionTree","rootNodeDimensions","treeDimensions","rootNodeOffsetLeft","left","rootNodeRadius","adjustContainerSizeAndTreePosition","useCallback","setTimeout","resizeTreeContainer","useEffect","event","Desktop","treeContainerEl","useRef","dimensions","current","centerTree","ref","breakpoints","ResponsiveTree","rawTreeData","setTreeData","newTreeData","cloneDeep","insertBlankPlaceholderNodes","window","innerWidth","Root","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1fc36f39.chunk.js","sourcesContent":["import React from 'react';\nimport Tree from 'react-d3-tree';\nimport PropTypes from 'prop-types';\n\nconst nodeStyle = {\n  circle: {\n    stroke: 'white',\n    fill: '#162447',\n  },\n  name: {\n    stroke: 'white',\n    fill: 'white',\n  },\n};\n\nconst styles = {\n  links: {\n    stroke: 'white',\n  },\n  nodes: {\n    node: nodeStyle,\n    leafNode: nodeStyle,\n  }\n};\n\nconst nodeSvgShape = {\n  shape: 'circle',\n  shapeProps: {\n    r: 40,\n  },\n};\n\nconst textLayout = {\n  textAnchor: 'middle',\n  x: 0,\n  y: 0\n};\n\nconst pathFunc = linkData => {\n  console.log(linkData);\n  const { source, target } = linkData;\n\n  // For the path elements leading to blank nodes, we don't want them to have\n  // a real path/shape. Otherwise we'll see a bunch of paths leading to\n  // nothing and potentially making the tree g element unnecessarily wide if some of\n  // these paths are at the edges.\n  if (target.name === '') return null;\n\n  return `M${source.x},${source.y}L${target.x},${target.y}`;\n};\n\nconst StyledTree = ({ data, translate, zoomable, onUpdate }) => {\n  return (\n    <Tree\n      orientation='vertical'\n      pathFunc={pathFunc}\n      styles={styles}\n      nodeSvgShape={nodeSvgShape}\n      textLayout={textLayout}\n      data={data}\n      translate={translate}\n      zoomable={zoomable}\n      onUpdate={onUpdate}\n    />\n  )\n};\n\nStyledTree.propTypes = {\n  data: PropTypes.object,\n  translate: PropTypes.object,\n  zoomable: PropTypes.bool,\n  onUpdate: PropTypes.func,\n};\n\nStyledTree.defaultProps = {\n  zoomable: true,\n};\n\nexport default StyledTree;\n","const buildBlankNode = () => ({\n  name: '',\n  nodeSvgShape: {\n    shape: 'circle',\n    shapeProps: {\n      r: 0,\n    }\n  }\n});\n\nconst insertBlankChildNode = (node) => {\n  const childNode = node.children[0];\n  const blankNode = buildBlankNode();\n  if (parseInt(childNode.name) < parseInt(node.name)) {\n    node.children.push(blankNode);\n  } else {\n    node.children.unshift(blankNode);\n  }\n};\n\nexport const insertBlankNodesRecursively = node => {\n  const children = node.children || [];\n  children.forEach(child => insertBlankNodesRecursively(child));\n  if (children.length === 1) insertBlankChildNode(node);\n};\n\nexport const getRootNodeDimensions = () => {\n  const treeGElement = document.querySelector('.nodeBase');\n  return treeGElement.getBoundingClientRect();\n};\n\nexport const getTreeDimensions = () => {\n  const treeGElement = document.querySelector('g');\n  return treeGElement.getBoundingClientRect();\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport StyledTree from '../StyledTree';\nimport styled from 'styled-components/macro';\nimport {\n  getTreeDimensions,\n  getRootNodeDimensions,\n} from './util';\nimport PropTypes from 'prop-types';\n\nconst TreeContainer = styled.div`\n  height: ${props => `${props.height}px`};\n  width: ${props => `${props.width}px`};\n  min-height: 100vh;\n\n  svg {\n    /* Allows the tree to 'extend' past the bounds of the svg \n      while waiting for the tree container to resize */\n    overflow: visible;\n  }\n\n  circle[r=\"0\"] + g {\n    /* For some reason in Safari, the sibling g element of the blank circle\n    is given a 2x2 height and width.\n\n    So whenever the tree g element width gets calculated, it seems to take into account\n    this g element because it's taking up some space. However we don't want the width\n    to take into acccount any blank nodes because then the width might be unnecessarily wide\n    if a blank node is at the edge, making it look like there's extra horizontal padding.\n    So we give this g element display: none in order to essentially remove it from the\n    document so it no longer takes up space.\n\n    This seems to allow the tree g element width calculation to no longer take it into\n    account, giving us a width that's not overly wide in these 'blank node at the edges'\n    scenarios. */\n    display: none;\n  }\n`;\n\nconst treeContainerPadding = {\n  top: 200,\n  right: 20,\n  bottom: 200,\n  left: 20,\n};\n\nconst Mobile = ({ treeData }) => {\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\n  const [treeContainerDimensions, setTreeContainerDimensions] = useState({ height: 0, width: 0 });\n\n  const resizeTreeContainer = () => {\n    // We resize the tree container based on the newly updated size of the tree\n    const treeDimensions = getTreeDimensions();\n\n    setTreeContainerDimensions({\n      height: treeContainerPadding.top + treeDimensions.height + treeContainerPadding.bottom,\n      width: treeContainerPadding.left + treeDimensions.width + treeContainerPadding.right,\n    });\n  };\n\n  const positionTree = () => {\n    // We position the tree to be flush with the tree container\n    const rootNodeDimensions = getRootNodeDimensions();\n    const treeDimensions = getTreeDimensions();\n    const rootNodeOffsetLeft = rootNodeDimensions.left - treeDimensions.left;\n    const rootNodeRadius = rootNodeDimensions.width / 2;\n    const rootNodeXPositionInTree = rootNodeOffsetLeft + rootNodeRadius;\n\n    setTranslate({\n      x: rootNodeXPositionInTree + treeContainerPadding.left,\n      y: treeContainerPadding.top,\n    });\n  };\n\n  // We wrap this in useCallback so we can pass it as a dependency to useEffect and\n  // prevent the 'react-hooks/exhaustive-deps' warning.\n  const adjustContainerSizeAndTreePosition = useCallback(() => {\n    // We wait one second to give enough time for the tree g element to newly render first\n    setTimeout(() => {\n      resizeTreeContainer();\n      positionTree();\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    adjustContainerSizeAndTreePosition();\n  }, [treeData, adjustContainerSizeAndTreePosition]);\n\n  const onUpdate = event => {\n    // We only adjust if event.node exists, aka it's a node toggle event. We don't\n    // care about other events.\n    if (event.node) adjustContainerSizeAndTreePosition();\n  }\n\n  return (\n    <TreeContainer height={treeContainerDimensions.height} width={treeContainerDimensions.width}>\n      <StyledTree\n        data={treeData}\n        translate={translate}\n        zoomable={false}\n        onUpdate={onUpdate}\n      />\n    </TreeContainer>\n  )\n};\n\nMobile.propTypes = {\n  treeData: PropTypes.object,\n};\n\nexport default Mobile;\n","import React, { useState, useRef, useEffect } from 'react';\nimport StyledTree from '../StyledTree';\nimport styled from 'styled-components/macro';\nimport PropTypes from 'prop-types';\n\nconst TreeContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n`;\n\nconst Desktop = ({ treeData }) => {\n  const treeContainerEl = useRef(null);\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\n  \n  const centerTree = () => {\n    const dimensions = treeContainerEl.current.getBoundingClientRect();\n    setTranslate({\n      x: dimensions.width / 2,\n      y: dimensions.height / 2\n    });\n  }\n\n  useEffect(() => {\n    centerTree();\n  }, []);\n\n  return (\n    <TreeContainer ref={treeContainerEl}>\n      <StyledTree\n        data={treeData}\n        translate={translate}\n      />\n    </TreeContainer>\n  )\n};\n\nDesktop.propTypes = {\n  treeData: PropTypes.object,\n};\n\nexport default Desktop;\n","// https://jsramblings.com/how-to-use-media-queries-with-styled-components/\n\nexport const breakpoints = {\n  tablet: 768,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Mobile from './Mobile';\nimport Desktop from './Desktop';\nimport { breakpoints } from '../breakpoints';\nimport cloneDeep from 'clone-deep';\nimport { insertBlankNodesRecursively } from './util';\n\nconst treeDefaultData = {\n  name: '12',\n  children: [\n    {\n      name: '8',\n      children: [\n        {\n          name: '15',\n          children: [\n            {\n              name: '3',\n            },\n          ]\n        },\n        {\n          name: '19',\n          children: [\n            {\n              name: '11',\n            },\n            {\n              name: '55',\n              children: [\n                {\n                  name: '14',\n                  children: [\n                    {\n                      name: '444',\n                    }\n                  ]\n                }\n              ]\n            },\n          ]\n        },\n      ]\n    },\n    {\n      name: '24',\n      children: [\n        {\n          name: '2',\n        }\n      ]\n    }\n  ]\n};\n\nconst ResponsiveTree = ({ rawTreeData }) => {\n  const [treeData, setTreeData] = useState({});\n\n  useEffect(() => {\n    const insertBlankPlaceholderNodes = () => {\n      // We insert blank nodes in the tree to act as sibling placeholders.\n      // That allows single child nodes to be offset from their parents instead of\n      // positioned directly below (the default behavior for react-d3-tree).\n      const newTreeData = cloneDeep(rawTreeData);\n      insertBlankNodesRecursively(newTreeData);\n      setTreeData(newTreeData);\n    };\n\n    insertBlankPlaceholderNodes();\n  }, [rawTreeData]);\n\n  // https://blog.logrocket.com/developing-responsive-layouts-with-react-hooks/\n  return window.innerWidth < breakpoints.tablet ? <Mobile treeData={treeData} /> : <Desktop treeData={treeData} />;\n}\n\nexport default ResponsiveTree;\n\nResponsiveTree.propTypes = {\n  rawTreeData: PropTypes.object,\n};\n\nResponsiveTree.defaultProps = {\n  rawTreeData: treeDefaultData,\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport ResponsiveTree from './ResponsiveTree';\nimport { breakpoints } from './breakpoints';\n\nconst Root = styled.div`\n  background: #162447;\n\n  @media (max-width: ${breakpoints.tablet}px) {\n    min-width: 100vw;\n    display: flex;\n    justify-content: center;\n    width: fit-content;\n  }\n`;\n\nconst App = () => (\n  <Root>\n    <ResponsiveTree />\n  </Root>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}